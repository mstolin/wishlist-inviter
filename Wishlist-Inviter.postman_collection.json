{
	"info": {
		"_postman_id": "6b4375b7-fa37-4659-8a77-378ea0c810db",
		"name": "Wishlist-Inviter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User-Endpoint",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Items",
							"item": [
								{
									"name": "Single Item",
									"item": [
										{
											"name": "Update Item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const firstItem = {",
															"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
															"    \"price\": 54.84,",
															"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
															"    \"vendor\": \"amazon\"",
															"}",
															"",
															"pm.test(\"Status is ok/200\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"",
															"pm.test(\"Body is JSON\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Item ID is equal\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
															"});",
															"",
															"pm.test(\"Response is equal to first item\", function () {",
															"    const item = pm.response.json();",
															"",
															"    pm.expect(item.name).to.be.equal(firstItem.name);",
															"    pm.expect(item.price).to.be.equal(firstItem.price);",
															"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
															"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
															"});",
															"",
															"pm.test(\"Has been bought\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item[\"has_been_baught\"]).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",\n    \"price\": 54.84,\n    \"vendor_id\": \"I3UCMMATCW0ATV\",\n    \"has_been_baught\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
													"protocol": "http",
													"host": [
														"{{SERVER-ADDRESS}}"
													],
													"port": "{{USER-ENDPOINT-PORT}}",
													"path": [
														"users",
														"{{USER-ID}}",
														"items",
														"{{FIRST-ITEM-ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const firstItem = {",
															"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
															"    \"price\": 54.84,",
															"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
															"    \"vendor\": \"amazon\"",
															"}",
															"",
															"pm.test(\"Status is ok/200\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"",
															"pm.test(\"Body is JSON\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Item ID is equal\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
															"});",
															"",
															"pm.test(\"Response is equal to first item\", function () {",
															"    const item = pm.response.json();",
															"",
															"    pm.expect(item.name).to.be.equal(firstItem.name);",
															"    pm.expect(item.price).to.be.equal(firstItem.price);",
															"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
															"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
													"protocol": "http",
													"host": [
														"{{SERVER-ADDRESS}}"
													],
													"port": "{{USER-ENDPOINT-PORT}}",
													"path": [
														"users",
														"{{USER-ID}}",
														"items",
														"{{FIRST-ITEM-ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const firstItem = {",
															"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
															"    \"price\": 54.84,",
															"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
															"    \"vendor\": \"amazon\"",
															"}",
															"",
															"pm.test(\"Status is ok/200\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"",
															"pm.test(\"Body is JSON\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Item ID is equal\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
															"});",
															"",
															"pm.test(\"Response is equal to first item\", function () {",
															"    const item = pm.response.json();",
															"",
															"    pm.expect(item.name).to.be.equal(firstItem.name);",
															"    pm.expect(item.price).to.be.equal(firstItem.price);",
															"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
															"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
													"protocol": "http",
													"host": [
														"{{SERVER-ADDRESS}}"
													],
													"port": "{{USER-ENDPOINT-PORT}}",
													"path": [
														"users",
														"{{USER-ID}}",
														"items",
														"{{FIRST-ITEM-ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create/Add Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const items = [",
													"    {",
													"        \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
													"        \"price\": 54.84,",
													"        \"vendor_id\": \"I3UCMMATCW0ATV\",",
													"        \"vendor\": \"amazon\"",
													"    },",
													"    {",
													"        \"name\": \"Hario V60 Glass Coffee Dripper\",",
													"        \"price\": 50.8,",
													"        \"vendor\": \"amazon\",",
													"        \"vendor_id\": \"IP0OBIK4UO9AG\"",
													"    }",
													"];",
													"",
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Is array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.instanceOf(Array);",
													"});",
													"",
													"pm.test(\"Items are equal\", function () {",
													"    const jsonData = pm.response.json();",
													"    const firstItem = jsonData[0];",
													"    const secondItem = jsonData[1];",
													"",
													"    pm.expect(firstItem.name).to.be.equal(items[0].name);",
													"    pm.expect(firstItem.price).to.be.equal(items[0].price);",
													"    pm.expect(firstItem.vendor).to.be.equal(items[0].vendor);",
													"    pm.expect(firstItem[\"vendor_id\"]).to.be.equal(items[0][\"vendor_id\"]);",
													"",
													"    pm.expect(secondItem.name).to.be.equal(items[1].name);",
													"    pm.expect(secondItem.price).to.be.equal(items[1].price);",
													"    pm.expect(secondItem.vendor).to.be.equal(items[1].vendor);",
													"    pm.expect(secondItem[\"vendor_id\"]).to.be.equal(items[1][\"vendor_id\"]);",
													"",
													"    pm.environment.set(\"FIRST-ITEM-ID\", firstItem.id);",
													"    pm.environment.set(\"SECOND-ITEM-ID\", secondItem.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",\n        \"price\": 54.84,\n        \"vendor_id\": \"I3UCMMATCW0ATV\",\n        \"vendor\": \"amazon\"\n    },\n    {\n        \"name\": \"Hario V60 Glass Coffee Dripper\",\n        \"price\": 50.8,\n        \"vendor\": \"amazon\",\n        \"vendor_id\": \"IP0OBIK4UO9AG\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}/items",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{USER-ENDPOINT-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Is array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.instanceOf(Array);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}/items",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{USER-ENDPOINT-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Has user ID\", function () {",
											"    const jsonData = pm.response.json();",
											"    const userId = jsonData[\"id\"];",
											"    pm.expect(userId).to.be.a.string;",
											"    pm.expect(userId).not.to.be.empty;",
											"    pm.environment.set(\"USER-ID\", userId);",
											"});",
											"",
											"pm.test(\"Has array of items\", function () {",
											"    const jsonData = pm.response.json();",
											"    const items = jsonData[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Has user ID\", function () {",
											"    const jsonData = pm.response.json();",
											"    const userId = jsonData[\"id\"];",
											"    pm.expect(userId).to.be.a.string;",
											"    pm.expect(userId).not.to.be.empty;",
											"});",
											"",
											"pm.test(\"Has array of items\", function () {",
											"    const jsonData = pm.response.json();",
											"    const items = jsonData[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"users",
										"{{USER-ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"User ID is equal\", function () {",
											"    const jsonData = pm.response.json();",
											"    const userId = jsonData[\"id\"];",
											"    pm.expect(userId).to.be.a.string;",
											"    pm.expect(userId).not.to.be.empty;",
											"    pm.expect(userId).to.be.equal(pm.environment.get(\"USER-ID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/users/{{USER-ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"users",
										"{{USER-ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Hass access token\", function () {",
											"    const jsonData = pm.response.json();",
											"    const accessToken = jsonData[\"access_token\"]",
											"    pm.expect(accessToken).to.be.a.string;",
											"    pm.expect(accessToken).not.to.be.empty;",
											"    pm.environment.set(\"ACCESS-TOKEN\", accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{USER-ID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/auth",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wishlists",
					"item": [
						{
							"name": "Get Games Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Information are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"id\"]).to.be.equal(pm.variables.get(\"AMAZON-WISHLIST-GAMES\"));",
											"    pm.expect(jsonData[\"vendor\"]).to.be.equal(\"amazon\");",
											"    pm.expect(jsonData[\"name\"]).to.be.equal(\"Games\");",
											"});",
											"",
											"pm.test(\"Items are correct\", function () {",
											"    const items = pm.response.json()[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"    pm.expect(items).to.be.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/items/amazon/wishlists/{{AMAZON-WISHLIST-GAMES}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"items",
										"amazon",
										"wishlists",
										"{{AMAZON-WISHLIST-GAMES}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Coffee Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Information are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"id\"]).to.be.equal(pm.variables.get(\"AMAZON-WISHLIST-COFFEE\"));",
											"    pm.expect(jsonData[\"vendor\"]).to.be.equal(\"amazon\");",
											"    pm.expect(jsonData[\"name\"]).to.be.equal(\"Kaffee-Zeug\");",
											"});",
											"",
											"pm.test(\"Items are correct\", function () {",
											"    const items = pm.response.json()[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"    pm.expect(items).to.be.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/items/amazon/wishlists/{{AMAZON-WISHLIST-COFFEE}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"items",
										"amazon",
										"wishlists",
										"{{AMAZON-WISHLIST-COFFEE}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mail",
					"item": [
						{
							"name": "Send Invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Information are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"message\"]).to.be.equal(\"mail has been sent successfully\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"recipient\": \"{{MAIL-RECEIVER}}\",\n    \"user_id\": \"{{USER-ID}}\",\n    \"items\": [{{FIRST-ITEM-ID}}, {{SECOND-ITEM-ID}}]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-ENDPOINT-PORT}}/mail/invitations/",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-ENDPOINT-PORT}}",
									"path": [
										"mail",
										"invitations",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS-TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User-Service",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Items",
							"item": [
								{
									"name": "Single Item",
									"item": [
										{
											"name": "Get Item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const firstItem = {",
															"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
															"    \"price\": 54.84,",
															"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
															"    \"vendor\": \"amazon\"",
															"}",
															"",
															"pm.test(\"Status is ok/200\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"",
															"pm.test(\"Body is JSON\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Item ID is equal\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
															"});",
															"",
															"pm.test(\"Response is equal to first item\", function () {",
															"    const item = pm.response.json();",
															"",
															"    pm.expect(item.name).to.be.equal(firstItem.name);",
															"    pm.expect(item.price).to.be.equal(firstItem.price);",
															"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
															"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
													"protocol": "http",
													"host": [
														"{{SERVER-ADDRESS}}"
													],
													"port": "{{USER-SERVICE-PORT}}",
													"path": [
														"users",
														"{{USER-ID}}",
														"items",
														"{{FIRST-ITEM-ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const firstItem = {",
															"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
															"    \"price\": 54.84,",
															"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
															"    \"vendor\": \"amazon\"",
															"}",
															"",
															"pm.test(\"Status is ok/200\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"",
															"pm.test(\"Body is JSON\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Item ID is equal\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
															"});",
															"",
															"pm.test(\"Response is equal to first item\", function () {",
															"    const item = pm.response.json();",
															"",
															"    pm.expect(item.name).to.be.equal(firstItem.name);",
															"    pm.expect(item.price).to.be.equal(firstItem.price);",
															"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
															"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
															"});",
															"",
															"pm.test(\"Has been bought\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item[\"has_been_baught\"]).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Hario V60 Glass Coffee Dripper\",\n    \"price\": 50.8,\n    \"vendor_id\": \"IP0OBIK4UO9AG\",\n    \"has_been_baught\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
													"protocol": "http",
													"host": [
														"{{SERVER-ADDRESS}}"
													],
													"port": "{{USER-SERVICE-PORT}}",
													"path": [
														"users",
														"{{USER-ID}}",
														"items",
														"{{FIRST-ITEM-ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const firstItem = {",
															"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
															"    \"price\": 54.84,",
															"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
															"    \"vendor\": \"amazon\"",
															"}",
															"",
															"pm.test(\"Status is ok/200\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"",
															"pm.test(\"Body is JSON\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Item ID is equal\", function () {",
															"    const item = pm.response.json();",
															"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
															"});",
															"",
															"pm.test(\"Response is equal to first item\", function () {",
															"    const item = pm.response.json();",
															"",
															"    pm.expect(item.name).to.be.equal(firstItem.name);",
															"    pm.expect(item.price).to.be.equal(firstItem.price);",
															"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
															"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
													"protocol": "http",
													"host": [
														"{{SERVER-ADDRESS}}"
													],
													"port": "{{USER-SERVICE-PORT}}",
													"path": [
														"users",
														"{{USER-ID}}",
														"items",
														"{{FIRST-ITEM-ID}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{ACCESS_TOKEN}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Create/Add Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const items = [",
													"    {",
													"        \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
													"        \"price\": 54.84,",
													"        \"vendor_id\": \"I3UCMMATCW0ATV\",",
													"        \"vendor\": \"amazon\"",
													"    },",
													"    {",
													"        \"name\": \"Hario V60 Glass Coffee Dripper\",",
													"        \"price\": 50.8,",
													"        \"vendor\": \"amazon\",",
													"        \"vendor_id\": \"IP0OBIK4UO9AG\"",
													"    }",
													"];",
													"",
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Is array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.instanceOf(Array);",
													"});",
													"",
													"pm.test(\"Items are equal\", function () {",
													"    const jsonData = pm.response.json();",
													"    const firstItem = jsonData[0];",
													"    const secondItem = jsonData[1];",
													"",
													"    pm.expect(firstItem.name).to.be.equal(items[0].name);",
													"    pm.expect(firstItem.price).to.be.equal(items[0].price);",
													"    pm.expect(firstItem.vendor).to.be.equal(items[0].vendor);",
													"    pm.expect(firstItem[\"vendor_id\"]).to.be.equal(items[0][\"vendor_id\"]);",
													"",
													"    pm.expect(secondItem.name).to.be.equal(items[1].name);",
													"    pm.expect(secondItem.price).to.be.equal(items[1].price);",
													"    pm.expect(secondItem.vendor).to.be.equal(items[1].vendor);",
													"    pm.expect(secondItem[\"vendor_id\"]).to.be.equal(items[1][\"vendor_id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"vendor_id\": \"I3UCMMATCW0ATV\",\n        \"vendor\": \"amazon\",\n        \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",\n        \"price\": 54.84\n    },\n    {\n        \"vendor_id\": \"IP0OBIK4UO9AG\",\n        \"vendor\": \"amazon\",\n        \"name\": \"Hario V60 Glass Coffee Dripper\",\n        \"price\": 50.8\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}/items/",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{USER-SERVICE-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Is array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.instanceOf(Array);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}/items",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{USER-SERVICE-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Has user ID\", function () {",
											"    const jsonData = pm.response.json();",
											"    const userId = jsonData[\"id\"];",
											"    pm.expect(userId).to.be.a.string;",
											"    pm.expect(userId).not.to.be.empty;",
											"});",
											"",
											"pm.test(\"Has array of items\", function () {",
											"    const jsonData = pm.response.json();",
											"    const items = jsonData[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-SERVICE-PORT}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Has user ID\", function () {",
											"    const jsonData = pm.response.json();",
											"    const userId = jsonData[\"id\"];",
											"    pm.expect(userId).to.be.a.string;",
											"    pm.expect(userId).not.to.be.empty;",
											"});",
											"",
											"pm.test(\"Has array of items\", function () {",
											"    const jsonData = pm.response.json();",
											"    const items = jsonData[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-SERVICE-PORT}}",
									"path": [
										"users",
										"{{USER-ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"User ID is equal\", function () {",
											"    const jsonData = pm.response.json();",
											"    const userId = jsonData[\"id\"];",
											"    pm.expect(userId).to.be.a.string;",
											"    pm.expect(userId).not.to.be.empty;",
											"    pm.expect(userId).to.be.equal(pm.environment.get(\"USER-ID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/{{USER-ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{USER-SERVICE-PORT}}",
									"path": [
										"users",
										"{{USER-ID}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS-TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Hass access token\", function () {",
									"    const jsonData = pm.response.json();",
									"    const accessToken = jsonData[\"access_token\"]",
									"    pm.expect(accessToken).to.be.a.string;",
									"    pm.expect(accessToken).not.to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"{{USER-ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{USER-SERVICE-PORT}}/users/auth",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{USER-SERVICE-PORT}}",
							"path": [
								"users",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Database-Adapter",
			"item": [
				{
					"name": "Items",
					"item": [
						{
							"name": "Single Item",
							"item": [
								{
									"name": "Get Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const firstItem = {",
													"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
													"    \"price\": 54.84,",
													"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
													"    \"vendor\": \"amazon\"",
													"}",
													"",
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Item ID is equal\", function () {",
													"    const item = pm.response.json();",
													"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
													"});",
													"",
													"pm.test(\"Response is equal to first item\", function () {",
													"    const item = pm.response.json();",
													"",
													"    pm.expect(item.name).to.be.equal(firstItem.name);",
													"    pm.expect(item.price).to.be.equal(firstItem.price);",
													"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
													"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{DATABASE-ADAPTER-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items",
												"{{FIRST-ITEM-ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const firstItem = {",
													"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
													"    \"price\": 54.84,",
													"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
													"    \"vendor\": \"amazon\"",
													"}",
													"",
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Item ID is equal\", function () {",
													"    const item = pm.response.json();",
													"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
													"});",
													"",
													"pm.test(\"Response is equal to first item\", function () {",
													"    const item = pm.response.json();",
													"",
													"    pm.expect(item.name).to.be.equal(firstItem.name);",
													"    pm.expect(item.price).to.be.equal(firstItem.price);",
													"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
													"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{DATABASE-ADAPTER-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items",
												"{{FIRST-ITEM-ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const firstItem = {",
													"    \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
													"    \"price\": 54.84,",
													"    \"vendor_id\": \"I3UCMMATCW0ATV\",",
													"    \"vendor\": \"amazon\"",
													"}",
													"",
													"pm.test(\"Status is ok/200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Body is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Item ID is equal\", function () {",
													"    const item = pm.response.json();",
													"    pm.expect(item.id).to.be.equal(pm.environment.get(\"FIRST-ITEM-ID\"));",
													"});",
													"",
													"pm.test(\"Response is equal to first item\", function () {",
													"    const item = pm.response.json();",
													"",
													"    pm.expect(item.name).to.be.equal(firstItem.name);",
													"    pm.expect(item.price).to.be.equal(firstItem.price);",
													"    pm.expect(item.vendor).to.be.equal(firstItem.vendor);",
													"    pm.expect(item[\"vendor_id\"]).to.be.equal(firstItem[\"vendor_id\"]);",
													"});",
													"",
													"pm.test(\"Has been bought\", function () {",
													"    const item = pm.response.json();",
													"    pm.expect(item[\"has_been_baught\"]).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Hario V60 Glass Coffee Dripper\",\n    \"price\": 50.8,\n    \"vendor_id\": \"IP0OBIK4UO9AG\",\n    \"has_been_baught\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}/items/{{FIRST-ITEM-ID}}",
											"protocol": "http",
											"host": [
												"{{SERVER-ADDRESS}}"
											],
											"port": "{{DATABASE-ADAPTER-PORT}}",
											"path": [
												"users",
												"{{USER-ID}}",
												"items",
												"{{FIRST-ITEM-ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create/Add Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const items = [",
											"    {",
											"        \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",",
											"        \"price\": 54.84,",
											"        \"vendor_id\": \"I3UCMMATCW0ATV\",",
											"        \"vendor\": \"amazon\"",
											"    },",
											"    {",
											"        \"name\": \"Hario V60 Glass Coffee Dripper\",",
											"        \"price\": 50.8,",
											"        \"vendor\": \"amazon\",",
											"        \"vendor_id\": \"IP0OBIK4UO9AG\"",
											"    }",
											"];",
											"",
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Is array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.instanceOf(Array);",
											"});",
											"",
											"pm.test(\"Items are equal\", function () {",
											"    const jsonData = pm.response.json();",
											"    const firstItem = jsonData[0];",
											"    const secondItem = jsonData[1];",
											"",
											"    pm.expect(firstItem.name).to.be.equal(items[0].name);",
											"    pm.expect(firstItem.price).to.be.equal(items[0].price);",
											"    pm.expect(firstItem.vendor).to.be.equal(items[0].vendor);",
											"    pm.expect(firstItem[\"vendor_id\"]).to.be.equal(items[0][\"vendor_id\"]);",
											"",
											"    pm.expect(secondItem.name).to.be.equal(items[1].name);",
											"    pm.expect(secondItem.price).to.be.equal(items[1].price);",
											"    pm.expect(secondItem.vendor).to.be.equal(items[1].vendor);",
											"    pm.expect(secondItem[\"vendor_id\"]).to.be.equal(items[1][\"vendor_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"vendor_id\": \"I3UCMMATCW0ATV\",\n        \"vendor\": \"amazon\",\n        \"name\": \"Hario 400 ml Olive Wood New Coffee Server, Transparent\",\n        \"price\": 54.84\n    },\n    {\n        \"vendor_id\": \"IP0OBIK4UO9AG\",\n        \"vendor\": \"amazon\",\n        \"name\": \"Hario V60 Glass Coffee Dripper\",\n        \"price\": 50.8\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}/items/",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{DATABASE-ADAPTER-PORT}}",
									"path": [
										"users",
										"{{USER-ID}}",
										"items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Is array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.instanceOf(Array);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}/items",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{DATABASE-ADAPTER-PORT}}",
									"path": [
										"users",
										"{{USER-ID}}",
										"items"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Has user ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    const userId = jsonData[\"id\"];",
									"    pm.expect(userId).to.be.a.string;",
									"    pm.expect(userId).not.to.be.empty;",
									"});",
									"",
									"pm.test(\"Has array of items\", function () {",
									"    const jsonData = pm.response.json();",
									"    const items = jsonData[\"items\"];",
									"    pm.expect(items).to.be.instanceOf(Array);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{DATABASE-ADAPTER-PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Has user ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    const userId = jsonData[\"id\"];",
									"    pm.expect(userId).to.be.a.string;",
									"    pm.expect(userId).not.to.be.empty;",
									"});",
									"",
									"pm.test(\"Has array of items\", function () {",
									"    const jsonData = pm.response.json();",
									"    const items = jsonData[\"items\"];",
									"    pm.expect(items).to.be.instanceOf(Array);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{DATABASE-ADAPTER-PORT}}",
							"path": [
								"users",
								"{{USER-ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"User ID is equal\", function () {",
									"    const jsonData = pm.response.json();",
									"    const userId = jsonData[\"id\"];",
									"    pm.expect(userId).to.be.a.string;",
									"    pm.expect(userId).not.to.be.empty;",
									"    pm.expect(userId).to.be.equal(pm.environment.get(\"USER-ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{DATABASE-ADAPTER-PORT}}/users/{{USER-ID}}",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{DATABASE-ADAPTER-PORT}}",
							"path": [
								"users",
								"{{USER-ID}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS-TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Amazon-Adapter",
			"item": [
				{
					"name": "Get Games Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Information are correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.be.equal(pm.variables.get(\"AMAZON-WISHLIST-GAMES\"));",
									"    pm.expect(jsonData[\"vendor\"]).to.be.equal(\"amazon\");",
									"    pm.expect(jsonData[\"name\"]).to.be.equal(\"Games\");",
									"});",
									"",
									"pm.test(\"Items are correct\", function () {",
									"    const items = pm.response.json()[\"items\"];",
									"    pm.expect(items).to.be.instanceOf(Array);",
									"    pm.expect(items).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{AMAZON-ADAPTER-PORT}}/wishlists/{{AMAZON-WISHLIST-GAMES}}",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{AMAZON-ADAPTER-PORT}}",
							"path": [
								"wishlists",
								"{{AMAZON-WISHLIST-GAMES}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Coffee Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Information are correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.be.equal(pm.variables.get(\"AMAZON-WISHLIST-COFFEE\"));",
									"    pm.expect(jsonData[\"vendor\"]).to.be.equal(\"amazon\");",
									"    pm.expect(jsonData[\"name\"]).to.be.equal(\"Kaffee-Zeug\");",
									"});",
									"",
									"pm.test(\"Items are correct\", function () {",
									"    const items = pm.response.json()[\"items\"];",
									"    pm.expect(items).to.be.instanceOf(Array);",
									"    pm.expect(items).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{AMAZON-ADAPTER-PORT}}/wishlists/{{AMAZON-WISHLIST-COFFEE}}",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{AMAZON-ADAPTER-PORT}}",
							"path": [
								"wishlists",
								"{{AMAZON-WISHLIST-COFFEE}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS-TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scrapper-Facade",
			"item": [
				{
					"name": "Amazon",
					"item": [
						{
							"name": "Get Games Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Information are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"id\"]).to.be.equal(pm.variables.get(\"AMAZON-WISHLIST-GAMES\"));",
											"    pm.expect(jsonData[\"vendor\"]).to.be.equal(\"amazon\");",
											"    pm.expect(jsonData[\"name\"]).to.be.equal(\"Games\");",
											"});",
											"",
											"pm.test(\"Items are correct\", function () {",
											"    const items = pm.response.json()[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"    pm.expect(items).to.be.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{SCRAPPER-FACADE-PORT}}/amazon/wishlists/{{AMAZON-WISHLIST-GAMES}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{SCRAPPER-FACADE-PORT}}",
									"path": [
										"amazon",
										"wishlists",
										"{{AMAZON-WISHLIST-GAMES}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Coffee Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is ok/200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Body is JSON\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Information are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"id\"]).to.be.equal(pm.variables.get(\"AMAZON-WISHLIST-COFFEE\"));",
											"    pm.expect(jsonData[\"vendor\"]).to.be.equal(\"amazon\");",
											"    pm.expect(jsonData[\"name\"]).to.be.equal(\"Kaffee-Zeug\");",
											"});",
											"",
											"pm.test(\"Items are correct\", function () {",
											"    const items = pm.response.json()[\"items\"];",
											"    pm.expect(items).to.be.instanceOf(Array);",
											"    pm.expect(items).to.be.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER-ADDRESS}}:{{SCRAPPER-FACADE-PORT}}/amazon/wishlists/{{AMAZON-WISHLIST-COFFEE}}",
									"protocol": "http",
									"host": [
										"{{SERVER-ADDRESS}}"
									],
									"port": "{{SCRAPPER-FACADE-PORT}}",
									"path": [
										"amazon",
										"wishlists",
										"{{AMAZON-WISHLIST-COFFEE}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS-TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GMail-Adapter",
			"item": [
				{
					"name": "Send Mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Information are correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"message\"]).to.be.equal(\"mail has been sent successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipient\":\"mstolin@mailbox.org\",\n    \"body\":\"To: <mstolin@mailbox.org>\\nFrom: <marcelstolin@gmail.com>\\nSubject: Someones sharing his wishlist\\nHi,\\nyou have been invited to buy the following items:\\nHario 400 ml Olive Wood New Coffee Server, Transparent, 54.84€\\nHario V60 Glass Coffee Dripper, 50.80€\\nCheers!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{GMAIL-ADAPTER-PORT}}/mail",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{GMAIL-ADAPTER-PORT}}",
							"path": [
								"mail"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS-TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Mail-Service",
			"item": [
				{
					"name": "Send Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is ok/200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Information are correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"message\"]).to.be.equal(\"mail has been sent successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipient\": \"{{MAIL-RECEIVER}}\",\n    \"user_id\": \"{{USER-ID}}\",\n    \"items\": [{{FIRST-ITEM-ID}}, {{SECOND-ITEM-ID}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{SERVER-ADDRESS}}:{{MAIL-SERVICE-PORT}}/invitations",
							"protocol": "http",
							"host": [
								"{{SERVER-ADDRESS}}"
							],
							"port": "{{MAIL-SERVICE-PORT}}",
							"path": [
								"invitations"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS-TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "SERVER-ADDRESS",
			"value": "localhost",
			"type": "default"
		},
		{
			"key": "USER-ENDPOINT-PORT",
			"value": "8080",
			"type": "default"
		},
		{
			"key": "USER-SERVICE-PORT",
			"value": "8071",
			"type": "default"
		},
		{
			"key": "SCRAPPER-FACADE-PORT",
			"value": "8022",
			"type": "default"
		},
		{
			"key": "MAIL-SERVICE-PORT",
			"value": "8021",
			"type": "default"
		},
		{
			"key": "GMAIL-ADAPTER-PORT",
			"value": "8043",
			"type": "default"
		},
		{
			"key": "DATABASE-ADAPTER-PORT",
			"value": "8061",
			"type": "default"
		},
		{
			"key": "AMAZON-ADAPTER-PORT",
			"value": "8042",
			"type": "default"
		},
		{
			"key": "AMAZON-WISHLIST-GAMES",
			"value": "3IGO1OHMRSUUM",
			"type": "default"
		},
		{
			"key": "AMAZON-WISHLIST-COFFEE",
			"value": "194N1KF03IPTL",
			"type": "default"
		},
		{
			"key": "MAIL-RECEIVER",
			"value": "marcelpascal.stolin@studenti.unitn.it",
			"type": "default"
		}
	]
}