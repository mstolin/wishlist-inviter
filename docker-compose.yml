networks:
    user-service-network:
        driver: bridge
    mail-service-network:
        driver: bridge
    scrapper-facade-network:
        driver: bridge
    database-adapter-network:
        driver: bridge
    gmail-adapter-network:
        driver: bridge
    amazon-adapter-network:
        driver: bridge
    database-network:
        driver: bridge
    amazon-clone-network:
        driver: bridge

volumes:
    postgres-db:

services:
    #
    # PROCESS CENTRIC LAYER
    #

    user-endpoint:
        build:
            context: .
            dockerfile: go-service.Dockerfile
            args:
                - SERVICE_NAME=user-endpoint
                - SERVICE_PROJECT_PATH=./user-endpoint
        environment:
            - USER_SERVICE=http://user-service:8080
            - SCRAPPER_FACADE=http://scrapper-facade:8080
            - MAIL_SERVICE=http://mail-service:8080
        ports: 
            - "8080:8080"
        restart: always
        depends_on:
            - user-service
            - scrapper-facade
            - mail-service
        networks:
            - user-service-network
            - mail-service-network
            - scrapper-facade-network

    #
    # BUSINESS SERVICES LAYER
    #

    user-service:
        build:
            context: .
            dockerfile: go-service.Dockerfile
            args:
                - SERVICE_NAME=user-service
                - SERVICE_PROJECT_PATH=./user-service
        environment:
            - DATABASE_ADAPTER=http://database-adapter:8080
        env_file:
            - env/JWT.env
        # ports: 
        #     - "8071:8080"
        restart: always
        depends_on:
            - database-adapter
        networks:
            - user-service-network
            - database-adapter-network

    mail-service:
        build:
            context: .
            dockerfile: go-service.Dockerfile
            args:
                - SERVICE_NAME=mail-service
                - SERVICE_PROJECT_PATH=./mail-service
        # ports:
        #     - "8021:8080"
        environment:
            - GMAIL_ADAPTER=http://gmail-adapter:8080
            - DATABASE_ADAPTER=http://database-adapter:8080
            - SENDER_MAIL=marcelstolin@gmail.com
        env_file:
            - env/JWT.env
        depends_on:
            - gmail-adapter
            - database-adapter
        restart: always
        networks:
            - mail-service-network
            - gmail-adapter-network
            - database-adapter-network

    scrapper-facade:
        build:
            context: .
            dockerfile: go-service.Dockerfile
            args:
                - SERVICE_NAME=scrapper-facade
                - SERVICE_PROJECT_PATH=./scrapper-facade
        # ports:
        #     - "8022:8080"
        environment:
            - AMAZON_SCRAPPER=http://amazon-adapter:8080
        env_file:
            - env/JWT.env
        depends_on:
            - amazon-adapter
        restart: always
        networks:
            - scrapper-facade-network
            - amazon-adapter-network

    #
    # ADAPTER SERVICES LAYER
    #

    database-adapter:
        build:
            context: .
            dockerfile: go-service.Dockerfile
            args:
                - SERVICE_NAME=database-adapter
                - SERVICE_PROJECT_PATH=./database-adapter
        environment:
            - DB_HOST=database
            - DB_PORT=5432
            - DB_USER=admin
            - DB_PASSWORD=admin123
            - DB_NAME=wishlist-inviter
        env_file:
            - env/JWT.env
        depends_on:
            - database
        # ports: 
        #     - "8061:8080"
        restart: always
        networks:
            - database-adapter-network
            - database-network

    gmail-adapter:
        build:
            context: .
            dockerfile: go-service.Dockerfile
            args:
                - SERVICE_NAME=gmail-adapter
                - SERVICE_PROJECT_PATH=./gmail-adapter
        # ports:
        #     - "8043:8080"
        env_file:
            - env/gmail-adapter/.env
            - env/JWT.env
        environment:
            - GMAIL_HOST=smtp.gmail.com
            - GMAIL_PORT=587
        restart: always
        networks:
            - gmail-adapter-network

    amazon-adapter:
        build: ./amazon-adapter
        # ports:
        #     - "8042:8080"
        environment:
            - AMAZON_URL=http://amazon-clone:8041
        env_file:
            - env/JWT.env
        restart: always
        depends_on:
            - amazon-clone
        networks:
            - amazon-adapter-network
            - amazon-clone-network

    #
    # DATA SERVICES LAYER
    #

    database:
        build: ./database
        # ports:
        #     - "5432:5432"
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_PASSWORD=admin123
            - POSTGRES_DB=wishlist-inviter
        volumes:
            - postgres-db:/var/lib/postgresql/data
        restart: always
        networks:
            - database-network

    amazon-clone:
        image: docker.io/nginx:1.23.1
        privileged: true # Give access to filesystem
        ports:
            - "8041:8041"
        volumes:
            - ./amazon-clone/nginx/html:/usr/share/nginx/html
            - ./amazon-clone/nginx/nginx.conf:/etc/nginx/nginx.conf
        restart: always
        networks:
            - amazon-clone-network
